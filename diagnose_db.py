#!/usr/bin/env python3
"""
Script de diagn√≥stico para problemas de conexi√≥n a la base de datos
"""

import os
import sys
import logging
from urllib.parse import urlparse

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def check_environment():
    """Verifica las variables de entorno"""
    logger.info("üîç Verificando variables de entorno...")
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.error("‚ùå DATABASE_URL no est√° configurada")
        return False
    
    logger.info(f"‚úÖ DATABASE_URL configurada: {database_url[:50]}...")
    
    # Parsear la URL para verificar formato
    try:
        url = urlparse(database_url)
        logger.info(f"üîß Host: {url.hostname}")
        logger.info(f"üîß Puerto: {url.port}")
        logger.info(f"üîß Base de datos: {url.path[1:]}")
        logger.info(f"üîß Usuario: {url.username}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error parseando DATABASE_URL: {e}")
        return False

def test_connection():
    """Prueba la conexi√≥n a la base de datos"""
    logger.info("üîç Probando conexi√≥n a la base de datos...")
    
    try:
        import psycopg2
        from urllib.parse import urlparse
        
        database_url = os.getenv('DATABASE_URL')
        url = urlparse(database_url)
        
        # Configuraci√≥n optimizada para Railway
        conn = psycopg2.connect(
            database=url.path[1:],
            user=url.username,
            password=url.password,
            host=url.hostname,
            port=url.port,
            connect_timeout=60,
            sslmode='require',
            application_name='sau-bot-diagnose'
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        logger.info(f"‚úÖ Conexi√≥n exitosa a PostgreSQL: {version[0][:50]}...")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_database_manager():
    """Prueba el DatabaseManager"""
    logger.info("üîç Probando DatabaseManager...")
    
    try:
        sys.path.append('src')
        from database_manager import DatabaseManager
        
        db_manager = DatabaseManager()
        
        # Health check
        if db_manager.health_check():
            logger.info("‚úÖ DatabaseManager health check exitoso")
        else:
            logger.error("‚ùå DatabaseManager health check fall√≥")
            return False
        
        # Probar operaci√≥n b√°sica
        with db_manager.get_connection() as (conn, cursor):
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            if result and result[0] == 1:
                logger.info("‚úÖ Operaci√≥n b√°sica exitosa")
            else:
                logger.error("‚ùå Operaci√≥n b√°sica fall√≥")
                return False
        
        db_manager.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en DatabaseManager: {e}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üîß DIAGN√ìSTICO DE BASE DE DATOS SA√ö AI")
    print("=" * 50)
    
    # Verificar variables de entorno
    if not check_environment():
        logger.error("‚ùå Variables de entorno no configuradas correctamente")
        sys.exit(1)
    
    # Probar conexi√≥n directa
    if not test_connection():
        logger.error("‚ùå Conexi√≥n directa fall√≥")
        sys.exit(1)
    
    # Probar DatabaseManager
    if not test_database_manager():
        logger.error("‚ùå DatabaseManager fall√≥")
        sys.exit(1)
    
    logger.info("‚úÖ Todos los diagn√≥sticos pasaron exitosamente")
    print("üéâ La configuraci√≥n de la base de datos est√° funcionando correctamente")

if __name__ == "__main__":
    main()
